{"version":3,"sources":["nav.js","chatbot.js","chat.js","chatwindow.js","App.js","serviceWorker.js","index.js"],"names":["nav","props","console","log","navStatus","react_default","a","createElement","AppBar","position","Toolbar","IconButton","color","aria-label","Menu_default","onClick","setNav","Typography","variant","_callee","text","sessionId","request","regenerator_default","wrap","_context","prev","next","axios","post","sent","abrupt","stop","useStyles","makeStyles","theme","message","textTransform","marginTop","right","marginRight","borderColor","left","marginLeft","card","maxWidth","media","height","Chat","classes","chatHistory","map","side","from","clsx","isText","Button","className","_ref","imageUri","Card","CardActionArea","CardMedia","image","CardContent","gutterBottom","component","title","subtitle","CardActions","size","buttons","send","sendMessage","paddingLeft","width","chatContainer","overflowY","addHistory","response","fromBot","data","fulfillmentText","fulfillmentMessages","time","Date","now","sessionError","ChatWindow","_useState","useState","_useState2","Object","slicedToArray","setText","_useState3","_useState4","sending","setSending","_useState5","_useState6","setChatHistory","useEffect","_x","_x2","_sendToBot","apply","this","arguments","sendToBot","then","history","updatedChat","concat","toConsumableArray","catch","e","length","Container","src_chat","TextField","id","value","margin","label","placeholder","input","borderBottom","onChange","event","target","onKeyPress","key","Fab","disabled","Icon","App","navProps","src_nav","chatwindow","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6fdc1fd9.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport { Toolbar, IconButton, Typography } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst nav = (props) => {\n    console.log(props.navStatus);\n    return (\n        <AppBar\n            position=\"static\"\n        >\n            <Toolbar>\n                <IconButton color=\"inherit\" aria-label=\"Menu\">\n                        <MenuIcon \n                        onClick={() => {\n                            (props.navStatus) ? props.setNav(false) : props.setNav(true)\n                        }}\n                        />\n                </IconButton>\n                <Typography variant=\"h6\">\n                    Chatbot\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    );\n}\nexport default nav;","import axios from 'axios';\n\nexport async function sendToBot(text, sessionId) {\n    let request;\n    request = await axios.post('http://localhost:8080/dialogflow', {\n        text: text,\n        sessionId: sessionId\n    });\n    return request;\n}","import React from 'react';\nimport clsx from 'clsx';\nimport { Card, CardContent, CardActions, CardActionArea, CardMedia, Typography, Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles((theme) => {\n    return {\n        message: {\n            textTransform: 'none',\n            marginTop: '10px',\n        },\n        right: {\n           marginRight: '80%',\n           borderColor: 'blue',\n        },\n        left: {\n            marginLeft: '80%',\n            borderColor: 'red'\n        },\n        card: {\n            maxWidth: 345,\n        },\n        media: {\n            height: 140,\n        },\n    };\n});\n\nconst Chat = (props) => {\n    const classes = useStyles();\n    const chat = props.chatHistory.map((message) => {\n        const side = (message.from === 'bot') ? clsx(classes.message, classes.left) : clsx(classes.message, classes.right);\n        if (message.isText) {\n            return (\n                <Button\n                    variant=\"outlined\"\n                    className={side}\n                >\n                    {message.message}\n                </Button>\n            );\n        } else {\n            const cards = message.message.map(({ card }) => {\n                console.log(card.imageUri);\n                return (\n                        <Card className={clsx(classes.card, classes.left)}>\n                            <CardActionArea>\n                                <CardMedia\n                                    className={classes.media}\n                                    image={card.imageUri}\n                                />\n                                <CardContent>\n                                    <Typography \n                                        gutterBottom\n                                        variant=\"h5\"\n                                        component=\"h2\"\n                                    >\n                                        {card.title}\n                                    </Typography>\n                                    <Typography\n                                        variant=\"body2\" \n                                        color=\"textSecondary\"\n                                        component=\"p\"\n                                    >\n                                        {card.subtitle}\n                                    </Typography>\n                                </CardContent>\n                            </CardActionArea>\n                            <CardActions>\n                                <Button size=\"small\" color=\"primary\">\n                                    {console.log(card.buttons)}\n                                </Button>\n                            </CardActions>\n                        </Card>\n                    );\n            });\n            return cards;\n        }\n    });\n   return chat; \n}\n\nexport default Chat;","import React, { useState, useEffect } from 'react';\nimport { Container, Card, CardContent, CardActions, TextField, Fab, Icon } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\nimport { sendToBot } from './chatbot';\nimport Chat from './chat';\n\nconst useStyles = makeStyles((theme) => {\n    return {\n        send: {\n            marginRight: '0',\n            marginLeft: 'auto',\n        },\n        sendMessage: {\n            marginLeft: '0',\n            paddingLeft: '0',\n            width: '95%',\n        },\n        message: {\n            textTransform: 'none',\n            marginTop: '10px',\n        },\n        right: {\n           marginRight: '80%',\n           borderColor: 'blue',\n        },\n        left: {\n            marginLeft: '80%',\n            borderColor: 'red'\n        },\n        chatContainer: {\n            height: '400px',\n            overflowY: 'auto',\n        },\n        card: {\n            maxWidth: 345,\n        },\n        media: {\n            height: 140,\n        },\n    };\n});\n\nconst addHistory = (response, fromBot) => {\n    if (!fromBot) {\n        return {\n            message: response, \n            time: Date.now(),\n            from: 'user',\n            isText: true\n        };\n    }\n    let message;\n    if (response.data.fulfillmentText) {\n        message = response.data.fulfillmentText;\n        response.isText = true;\n    } else {\n        message = response.data.fulfillmentMessages;\n        response.isText = false;\n    }\n    return {\n        message: message,\n        time: Date.now(),\n        from: 'bot',\n        isText: (response.isText)\n    }\n}\n\nlet sessionId = null;\nlet sessionError = false;\n\nconst ChatWindow = (props) => {\n    const classes = useStyles();\n    const [text, setText] = useState('');\n    const [sending, setSending] = useState(false);\n    const [chatHistory, setChatHistory] = useState([{\n        message: 'Hello I am a chatbot',\n        time: Date.now(),\n        from: 'bot',\n        isText: true,\n    }]);\n\n    useEffect(() => {\n        if (text !== '' && sending === true) {\n            sendToBot(text, sessionId).then((response) => {\n            const history = addHistory(response, true);\n            if (response.data.sessionId) {\n                sessionId = response.data.sessionId;\n            }\n            const updatedChat = [...chatHistory, history];\n            setSending(false);\n            setText('');\n            setChatHistory(updatedChat);\n            }).catch(e => {\n                sessionError = true;\n            });\n        } else {\n            setSending(false);\n        }\n    }, [sending, text, chatHistory]);\n\n    const sendMessage = () => {\n        if (\n            chatHistory.length > 0 &&\n            chatHistory[chatHistory.length - 1].from === 'bot'\n            && sessionError === false\n        ) {\n            const history = addHistory(text, false);\n            setChatHistory([...chatHistory, history]);\n            setSending(true); \n        }\n\n    }\n\n    return (\n        <Card>\n            <CardContent>\n                <Container className={classes.chatContainer}>\n                    <Chat chatHistory={chatHistory} />\n                </Container>\n            </CardContent>\n            <CardActions>\n                <TextField\n                    id=\"chat-textfield\"\n                    className={classes.sendMessage}\n                    value={text}\n                    margin=\"normal\"\n                    label=\"chat\"\n                    variant=\"outlined\"\n                    placeholder=\"Send message\"\n                    classes={{\n                        input: {\n                            'borderBottom': false\n                        }\n                    }}\n                    onChange={(event) => {\n                        setText(event.target.value);\n                    }}\n                    onKeyPress={(event) => {\n                        if (event.key === 'Enter') sendMessage()\n                    }}\n                />\n                <Fab \n                disabled={((sessionError || sending))}\n                color=\"primary\" \n                aria-label=\"Send\" \n                className={classes.send}\n                onClick={() => sendMessage()}\n                >\n                    <Icon>send</Icon>\n                </Fab>\n            </CardActions>\n        </Card>\n    );\n}\n\nexport default ChatWindow;","import React, { useState } from 'react';\nimport Nav from './nav';\nimport Chat from './chatwindow';\n\nfunction App() {\n  const [navStatus, setNav] = useState(false);\n  const navProps = {\n    navStatus,\n    setNav,\n  };\n  return (\n    <div className=\"app\">\n      <Nav {...navProps} />\n      <div>\n        <Chat />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}